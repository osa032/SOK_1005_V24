# -*- coding: utf-8 -*-
"""Oppgave kap 11 SOK-1005.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1S9-cqus7D2equ-9SNHsXCj_ABgGtERqv

# Oppgaver

## Interaktiv graf

Lag en interaktiv graf. Du kan bruke dataene fra oppgaven i kap. 10 om du vil
"""

import pandas as pd
import requests
from bs4 import BeautifulSoup
import csv
#!pip install bokeh
from bokeh.plotting import figure, show, output_notebook
from bokeh.models import HoverTool, ColumnDataSource
from bokeh.palettes import Category20c
from bokeh.transform import cumsum
from math import pi
import pandas as pd

# Koden for å hente data er hentet fra forrige oppgave
def scrape_books(url):
    # Det er flere sider, så må hente flere URL'er for å få med alt
    all_books = []

    while True:
        # Ber om HTTP
        try:
            response = requests.get(url)
        except requests.RequestException as e:
            print(e)
            break

        # Henter html innhold
        soup = BeautifulSoup(response.content, 'html.parser')

        # Henter dette
        for listing in soup.find_all("article", class_="product_pod"):
            rating = listing.find('p', class_='star-rating')['class'][1]  # Får med "rating"
            title = listing.find('img')['alt']
            price = listing.find('p', class_="price_color").text
            all_books.append([rating, title, price])

        # bruker html-scraping for å finne knappen til neste side
        next_button = soup.find("li", class_="next")
        if next_button:
            url = "http://books.toscrape.com/catalogue/" + next_button.find("a")["href"]
        else:
            break  # Når det ikke lengre er en neste knapp så stopper den

    return all_books

# Kjører alt
start_url = "http://books.toscrape.com/catalogue/page-1.html"
books = scrape_books(start_url)

# Lagrer data i dataframe
df = pd.DataFrame(books)
df.columns = ["rating", "title", "price"]

# Gjør noe artig med dataen, sjekker antall bøker per rating
from matplotlib import pyplot as plt
import seaborn as sns
df.groupby('rating').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

# Gjør noe annet artig med dataen, sjekker avg pris per rating, og
# Gjør pris om til tall/float
df['price'] = df['price'].replace('[£]', '', regex=True).astype(float)

# Finner gjennomsnittelig pris per rating
avg_price_per_rating = df.groupby('rating')['price'].mean()

#Lagrer i df
avg_price_df = pd.DataFrame(avg_price_per_rating)

df

output_notebook()  # Så den vises i en Jupyter Notebook

# Så jeg får orden på ratinene
rating_order = {'One': 1, 'Two': 2, 'Three': 3, 'Four': 4, 'Five': 5}
df['rating_order'] = df['rating'].map(rating_order)

# Sorterer og sammenfaller data
agg_data = df.groupby('rating').agg(total_price=('price', 'sum'),
                                    count=('title', 'size'),
                                    average_price=('price', 'mean')).reset_index()
agg_data['rating_order'] = agg_data['rating'].map(rating_order)
agg_data = agg_data.sort_values('rating_order')

# Finner størrelsene og fargene
agg_data['angle'] = agg_data['total_price'] / agg_data['total_price'].sum() * 2 * pi
agg_data['color'] = Category10_5[:len(agg_data)]

# Interaktivt element
agg_data['percentage'] = (agg_data['angle'] / (2 * pi)) * 100
agg_data['hover_text'] = agg_data.apply(lambda x: f"Rating: {x['rating']}<br>Total Price: ${x['total_price']:.2f}<br>Average Price: ${x['average_price']:.2f}<br>Books Count: {x['count']}<br>Percentage of total: {x['percentage']:.2f}%", axis=1)
source = ColumnDataSource(agg_data)

# Selve figuren
p = figure(height=350, title="Books by Rating", toolbar_location=None,
           tools="hover", tooltips="@hover_text", x_range=(-0.5, 1.0))

# Delene
p.wedge(x=0, y=1, radius=0.4,
        start_angle=cumsum('angle', include_zero=True), end_angle=cumsum('angle'),
        line_color="white", fill_color='color', legend_field='rating', source=source)

# LEgend
p.legend.location = "top_right"
p.legend.title = "Rating"

# Fjerne akser
p.axis.visible = False
p.grid.visible = False

show(p)

"""## Interaktivt kart

Finn data fra fylker og plott det i et interaktivt kart. Du kan bruke eksemplet under om du vil. Jobben din er å finne hvilke deler av koden som må endres, og hvordan.
"""

import geopandas as gpd
#loading the geographical data
#and converting to a coordinate system that folium understands:

# URL of the CSV file
url = r"https://titlon.uit.no/hht/data/fylker_komprimert.json"

#sometimes this doesn't work on mac
#g = pd.read_csv(url)#reading data

# Local file path to save the downloaded CSV
local_file_path = "fylker_komprimert.json"

# Download the CSV file using requests
response = requests.get(url)
with open(local_file_path, 'wb') as f:
    f.write(response.content)

import geopandas as gpd
import numpy as np
import string

#loading the geographical data
#and converting to a coordinate system that folium understands:
geodata = gpd.read_file(local_file_path)
#Need to specify which cooridinate system to use
geodata = geodata[['navn', 'geometry']]
geodata['Fylke'] = geodata['navn'].apply(lambda x: eval(x)[0]['navn'])

#Adding some random data:
geodata['Farge'] = np.random.rand(len(geodata))
s = string.ascii_letters
geodata['Tilfeldig streng'] = geodata['navn'].apply(lambda x: ''.join([s[i] for i in np.random.choice(len(s),8)]))
geodata['Tilfeldig kvm. pris'] = np.array(30000+np.random.rand(len(geodata))*40000, dtype = int)
geodata = geodata[['Fylke','Farge', 'Tilfeldig streng', 'Tilfeldig kvm. pris', 'geometry']]

#Adding cooridnates for symbols that shall be placed in the counties:
coordinates = {
    "Rogaland": (59.1000, 5.7333),
    "Vestfold og Telemark": (59.2800, 9.1100),
    "Nordland": (66.8309, 13.7467),
    "Agder": (58.3405, 7.9715),
    "Innlandet": (61.5000, 10.0000),
    "Møre og Romsdal": (62.7100, 7.3600),
    "Vestland": (60.3913, 5.3221),
    "Oslo": (59.9139, 10.7522),
    "Viken": (60.0, 9.5),
    "Trøndelag": (63.4305, 10.3951),
    "Troms og Finnmark": (70.2500, 25.0000)
}

geodata['lat'] = geodata['Fylke'].map(lambda fylke: coordinates[fylke][0] if fylke in coordinates else None)
geodata['lon'] = geodata['Fylke'].map(lambda fylke: coordinates[fylke][1] if fylke in coordinates else None)

geodata

import webbrowser
import folium

#Creating the map
norge=folium.Map(location=[65, 14],zoom_start=4.5)
f=folium.Choropleth(
    geo_data=geodata.to_json(),
    name="choropleth",
    columns=["Fylke", "Farge"],
    data=geodata,
    key_on="feature.properties.Fylke",
    fill_color="YlOrRd",
    nan_fill_color='white',
    fill_opacity=0.7,
    line_opacity=0.2,
    legend_name="Tilfeldig farge"
).add_to(norge)

folium.LayerControl().add_to(norge)

#norge.save('norge.html')
#webbrowser.open('norge.html')

for i,r in geodata.iterrows():
    #obtaining coordinates:
    lat=float(r['lat'])
    lon=float(r['lon'])

    #tooltips text:
    t=(f"<b>{r['Fylke']}</b><br>"
      f"<b>{r['Fylke']}</b><br>Description: {r['Fylke']}"
)

    #setting the marker:
    folium.Marker(
        [lat,lon-0.01],
        tooltip=t,
        icon=folium.Icon(color='blue')
    ).add_to(norge)

#norge.save('norge.html')
#webbrowser.open('norge.html')

for i,r in geodata.iterrows():
    #obtaining coordinates:
    lat=float(r['lat'])
    lon=float(r['lon'])

    #creating pin for wealth. The height of the stack of coins is determined by the
    #   picture file f"./img/{int(r['Mynter'])}coins.png":
    icon=folium.features.CustomIcon(f"/content/house.png")
    folium.Marker([lat,lon+0.4],tooltip=f"Kvm.pris:{r['Tilfeldig kvm. pris']}",icon=icon).add_to(norge)

norge.save('norge.html')